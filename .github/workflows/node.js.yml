# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/checkout@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Set environment variables
      - run: |
        echo '${{ secrets.APP_SETTING_JSON }}' | base64 --decode >> ./appsettings.json
        echo "IMAGE_NAME=asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/e-submission-lp/frontend" >> $GITHUB_ENV
        TAG=$([ $(echo $GITHUB_REF | cut -d'/' -f2) = "tags" ] && echo "production" || echo "${GITHUB_REF##*/}")
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - run: npm ci
      - run: npm run build --if-present

    - name: Login
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v0"

    - name: Configure Docker
      run: gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

    - name: Build Docker image
      run: |
        docker build \
        -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile.backend .

    - name: Push Docker image
      run: docker push $IMAGE_NAME:$IMAGE_TAG
      
    - name: Deploy on Development
      if: github.ref == 'refs/heads/development'
      uses: appleboy/ssh-action@master
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      with:
        host: ${{ secrets.SSH_HOST_DEV }}
        username: ${{ secrets.SSH_USERNAME_DEV }}
        key: ${{ secrets.SSH_KEY_DEV }}
        script_stop: true
        envs: IMAGE_NAME,IMAGE_TAG
        script: |
          echo '${{ secrets.DOCKER_COMPOSE }}' | base64 --decode >> docker-compose.yml
          echo "IMAGE: $IMAGE_NAME:$IMAGE_TAG"
          export IMAGE_NAME=$IMAGE_NAME
          export IMAGE_TAG=$IMAGE_TAG
          # running stack deploy
          docker stack deploy --with-registry-auth -c docker-compose.yml frontend

    - name: Send notification
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK_CICD }}
        username: GitHub Actions



